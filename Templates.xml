<?xml version="1.0" encoding="utf-8"?>
<globalTemplates>
  <!--<objectTemplate name="Dev">
    <objectfilter select="Name">
      <![CDATA[
get-service
]]>
    </objectfilter>
    <template name="Do nothing">
      <script>
        <![CDATA[
$empty = $null
]]>
      </script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
  </objectTemplate>
  <objectTemplate name="DevDyn">
    <objectfilter select="Name">
      <![CDATA[
get-service
]]>
    </objectfilter>
    <template name="Do nothing">
      <script>
        <![CDATA[
$empty = $null
]]>
      </script>
      <dynamicvalue>
        <![CDATA[
get-service | select @{N="Display";E={$_.DisplayName}},@{N="Real";E={$_.Name}}
      ]]>
      </dynamicvalue>
    </template>
  </objectTemplate>-->
  <objectTemplate name="Backup Jobs VMware">
    <objectfilter select="Name"><![CDATA[
get-vbrjob | ? { $_.jobtype -eq "Backup" -and $_.BackupPlatform -eq "EVmware" }
]]></objectfilter>
    <!--DIRTY BLOCK EXCLUSION-->
    <template name="Dirty block Exclusion">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.ViSourceOptions.DirtyBlocksNullingEnabled = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <!--SWAP EXCLUSION-->
    <template name="Swap File Exclusion">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.ViSourceOptions.ExcludeSwapFile = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <!--Deduplication-->
    <template name="Job Deduplication">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.BackupStorageOptions.EnableDeduplication = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <!--Blocksize-->
    <template name="Compression Level">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.BackupStorageOptions.CompressionLevel  = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <values>
        <value real="0">None</value>
        <value real="4">Dedup Friendly</value>
        <value real="5">Optimal</value>
        <value real="6">High</value>
        <value real="9">Extreme</value>
      </values>
    </template>
    <!--Blocksize-->
    <template name="Storage Blocksize">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.BackupStorageOptions.StgBlockSize  = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <values>
        <value real="KbBlockSize256">Wan Target</value>
        <value real="KbBlockSize512">Lan Target</value>
        <value real="KbBlockSize1024">Local target</value>
        <value real="KbBlockSize8192">Local Target 16tb+ (8MB,v8)</value>
        <value real="KbBlockSize4096">Local Target 16tb+ (4MB,v9)</value>
        <value>Automatic</value>
        <value real="KbBlockSize2048">2MB</value>
      </values>
    </template>
    <!--Restore Points-->
    <template name="Restore Points">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.BackupStorageOptions.RetainCycles = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <dynamicvalue>
(2..999) | select @{N="Display";E={$_}}
      </dynamicvalue>
    </template>
    <!--Algorithm-->
    <template name="Algorithm">
      <prescript><![CDATA[
$algorithm = "Increment"
$transformFullToSyntethic  = $false;
$transformIncrementsToSyntethic = $false;

switch ($value) {
 0 {
	#Reverse Incremental
	$algorithm = "Syntethic";
 }
 1 {
	#Forever Incremental
 }
 2 {
	#Incremental with Synthetic full
	$transformFullToSyntethic = $true;
 }
 3 {
	#Incremental with Synthetic Full and increment transform
	$transformFullToSyntethic = $true;
	$transformIncrementsToSyntethic = $true;
 }
}

]]></prescript>
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$target = $opt.BackupTargetOptions
$target.Algorithm = $algorithm
$target.TransformFullToSyntethic = $transformFullToSyntethic;
$target.TransformIncrementsToSyntethic = $transformIncrementsToSyntethic;
$obj | set-vbrjoboptions -Options $opt
 ]]></script>
      <values>
        <value real="0">Reverse Incremental</value>
        <value real="1">Forever Incremental</value>
        <value real="2">Weekly Synthetic</value>
        <value real="3">Weekly Synthetic and transform</value>
      </values>
    </template>
    <!--Synthetic Day-->
    <template name="Synthetic Day">
      <prescript>
	  </prescript>
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$target = $opt.BackupTargetOptions
$opt.BackupTargetOptions.TransformToSyntethicDays = $value
$obj | set-vbrjoboptions -Options $opt
 ]]></script>
      <values>
        <value real="0">Sunday</value>
        <value real="1">Monday</value>
        <value real="2">Tuesday</value>
        <value real="3">Wednesday</value>
        <value real="4">Thursday</value>
        <value real="5">Friday</value>
        <value real="6">Saturday</value>
      </values>
    </template>
    <!--Synthetic Day-->
    <template name="Synthetic Day Spread">
      <prescript><![CDATA[
$alloweddays = 1,2,3,4,5,6,0
switch ($value) {
	1 { $alloweddays = 5,6 }
	2 { $alloweddays = 5,6,0 }
	3 { $alloweddays = 6,0 }
}
$ctr = 0;
]]></prescript>
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$target = $opt.BackupTargetOptions
$opt.BackupTargetOptions.TransformToSyntethicDays = $alloweddays[$ctr]
$obj | set-vbrjoboptions -Options $opt
$ctr = ($ctr+1)%$alloweddays.Length
 ]]></script>
      <values>
        <value real="0">All days</value>
        <value real="1">Friday, Saturday</value>
        <value real="2">Friday, Saturday, Sunday</value>
        <value real="3">Saturday, Sunday</value>
      </values>
    </template>
    <!--Staggered-->
    <template name="Staggered Daily Backup">
      <prescript><![CDATA[
$time = 22
$interval = 5
$parallel = 1
$ctr = 0;


$split = @($value -split ";")
if ($split.Count -gt 2) { $parallel = [int]$split[2] }
if ($split.Count -gt 1) { $interval = [int]$split[1] }
$time = [int]$split[0]

function hm($ctr,$time,$interval,$parallel) {
    $ctrp = ($ctr-($ctr%$parallel))/$parallel
	$min = ($ctrp*$interval)%60
	$hour = ([int](($ctrp*$interval-$min)/60)+$time)%24
	return ("{0,2:D2}:{1,2:D2}" -f $hour,$min)
}

]]></prescript>
      <script><![CDATA[
$obj | Set-VBRJobSchedule -Daily -At $(hm $ctr $time $interval $parallel) | Enable-VBRJobSchedule
$ctr = $ctr+1
 ]]></script>
      <values>
        <value real="22;5;1">10pm ; 5m intervals</value>
        <value real="0;5;1">Midnight ; 5m intervals</value>
        <value real="22;10;1">10pm ; 10m intervals</value>
        <value real="0;10;1">Midnight ; 10m intervals</value>
        <value real="22;5;4">10pm ; 5m intervals ; 4 parallel</value>
        <value real="0;5;4">Midnight ; 5m intervals ; 4 parallel</value>
        <value real="22;10;4">10pm ; 10m intervals ; 4 parallel</value>
        <value real="0;10;4">Midnight ; 10m intervals ; 4 parallel</value>
      </values>
    </template>
    <!--Storage Level Corruption-->
    <template name="Storage Level Corruption Guard">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.GenerationPolicy.EnableRechek = $value
$obj | set-vbrjoboptions -Options $opt
 ]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <!--Defragment-->
    <template name="Defragment">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.GenerationPolicy.EnableCompactFull = $value
$obj | set-vbrjoboptions -Options $opt
 ]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <!--Defragment Delete VM-->
    <template name="Defragment Delete VM">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
if ($value -eq 0) {
	$opt.BackupStorageOptions.EnableDeletedVmDataRetention = $false
} ElseIf ($value -gt 0) {
	$opt.BackupStorageOptions.EnableDeletedVmDataRetention = $true
	$opt.BackupStorageOptions.RetainDays = $value
}
$obj | set-vbrjoboptions -Options $opt
 ]]></script>
      <values>
        <!--(1..30) | % { ( "<value real=`"{0}`">Enabled {1}</value>" -f $_,$_) } | clip-->
        <value real="0">Disabled</value>
        <value real="1">Enabled 1</value>
        <value real="2">Enabled 2</value>
        <value real="3">Enabled 3</value>
        <value real="4">Enabled 4</value>
        <value real="5">Enabled 5</value>
        <value real="6">Enabled 6</value>
        <value real="7">Enabled 7</value>
        <value real="8">Enabled 8</value>
        <value real="9">Enabled 9</value>
        <value real="10">Enabled 10</value>
        <value real="11">Enabled 11</value>
        <value real="12">Enabled 12</value>
        <value real="13">Enabled 13</value>
        <value real="14">Enabled 14</value>
        <value real="15">Enabled 15</value>
        <value real="16">Enabled 16</value>
        <value real="17">Enabled 17</value>
        <value real="18">Enabled 18</value>
        <value real="19">Enabled 19</value>
        <value real="20">Enabled 20</value>
        <value real="21">Enabled 21</value>
        <value real="22">Enabled 22</value>
        <value real="23">Enabled 23</value>
        <value real="24">Enabled 24</value>
        <value real="25">Enabled 25</value>
        <value real="26">Enabled 26</value>
        <value real="27">Enabled 27</value>
        <value real="28">Enabled 28</value>
        <value real="29">Enabled 29</value>
        <value real="30">Enabled 30</value>
      </values>
    </template>
    <!--Postscript-->
    <template name="Postscript (Every Run + Name Param)">
      <prescript>
if ($value -ne 0 -and -not $(test-path $value))
{
	write-error "Script does not exist, refusing"
} else {
	  </prescript>
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
if ($value -eq 0) {
	$opt.JobScriptCommand.PostScriptEnabled = $false
} Else {
	$opt.JobScriptCommand.PostScriptCommandLine = $value+" `""+$obj.Name+"`""
	$opt.JobScriptCommand.PostScriptEnabled= $true
	$opt.JobScriptCommand.Periodicity = "cycles"
	$opt.JobScriptCommand.Frequency = 1
}
$obj | set-vbrjoboptions -Options $opt
 ]]></script>
      <postscript>
	}
	</postscript>
      <values>
        <value real="0">Disabled</value>
        <value>c:\myscript\myscript.ps1</value>
      </values>
    </template>
    <!--Detach Current + Change Repo-->
    <template name="(Unsupported) Detach + Change Repo">
      <prescript>
$repo = get-vbrbackuprepository -name $value
if (@($repo).Count -eq 1) {
	  </prescript>
      <postscript>
}
	  </postscript>
      <script><![CDATA[
try { $obj.GetLastBackup().DetachJob()} catch {}
$obj.Info.UpdateTargetRepository($repo.id,$obj.TargetFile)
$obj.Update()
 ]]></script>
      <dynamicvalue>
Get-VBRBackupRepository | select @{N="Display";E={($_.Name)}}
      </dynamicvalue>
    </template>
  </objectTemplate>
  <objectTemplate name="Backup Jobs Hyperv">
    <objectfilter select="Name"><![CDATA[
get-vbrjob | ? { $_.jobtype -eq "Backup" -and $_.BackupPlatform -eq "EHyperV" }
]]></objectfilter>
    <!--Swap File Exclusion-->
    <template name="Swap File Exclusion">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.HvSourceOptions.ExcludeSwapFile = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <!--CompressionLevel-->
    <template name="Compression Level">
      <script><![CDATA[
$obj | Set-VBRJobAdvancedStorageOptions -CompressionLevel $value
]]></script>
      <values>
        <value real="0">None</value>
        <value real="4">Dedupe Friendly</value>
        <value real="5">Optimal</value>
        <value real="6">High</value>
        <value real="9">Extreme</value>
      </values>
    </template>
    <!--Disable Indexing-->
    <template name="Guest File System Indexing">
      <script><![CDATA[
$opt = $value + (" """) +$obj.Name + ("""")
iex $opt
]]></script>
      <values>
        <value real="Enable-VBRJobGuestFSIndexing -Job ">Enabled</value>
        <value real="Disable-VBRJobGuestFSIndexing -Job ">Disabled</value>
    </values>
    </template>
    <!--Restore Points-->
    <template name="Restore Points">
      <script><![CDATA[
$opt = $obj | get-vbrjoboptions
$opt.BackupStorageOptions.RetainCycles = $value
$obj | set-vbrjoboptions -Options $opt
]]></script>
      <dynamicvalue>
(2..999) | select @{N="Display";E={$_}}
      </dynamicvalue>
    </template>
  </objectTemplate>
  <objectTemplate name="Repositories">
    <objectfilter select="Name"><![CDATA[
 Get-VBRBackupRepository
]]></objectfilter>
    <template name="Decompress Before Storing">
      <script><![CDATA[
$obj.Options.Uncompress = $value
$obj.SaveOptions()
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <template name="Use per VM Chain">
      <script><![CDATA[
$obj.Options.OneBackupFilePerVm = $value
$obj.SaveOptions()
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <template name="Align blocks">
      <script><![CDATA[
$obj.Options.OptimizeBlockAlign = $value
$obj.SaveOptions()
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
  </objectTemplate>
  <objectTemplate name="VI Proxies">
    <objectfilter select="Name"><![CDATA[
 Get-VBRViProxy
]]></objectfilter>
    <template name="Transport Mode">
      <script><![CDATA[
$obj.Options.TransportMode = $value
$obj.SaveOptions()
]]></script>
      <dynamicvalue><![CDATA[
[Veeam.Backup.Model.ETransportMode] | gm -Static -Type property | select @{N="Display";E={$_.Name}}
      ]]></dynamicvalue>
    </template>
    <template name="Failover to Network Mode">
      <script><![CDATA[
$obj.Options.FailoverToNetwork = $value
$obj.SaveOptions()
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <template name="Use SSL for NBD">
      <script><![CDATA[
$obj.Options.UseSsl = $value
$obj.SaveOptions()
]]></script>
      <values>
        <value real="1">Enabled</value>
        <value real="0">Disabled</value>
      </values>
    </template>
    <template name="Max tasks">
      <script><![CDATA[
$obj.Options.MaxTasksCount = $value
$obj.SaveOptions()
]]></script>
      <values>
        <!--(1..40) | % { ( "<value real=`"{0}`">Enabled {1}</value>" -f $_,$_) } | clip-->
        <value real="1">1</value>
        <value real="2">2</value>
        <value real="3">3</value>
        <value real="4">4</value>
        <value real="5">5</value>
        <value real="6">6</value>
        <value real="7">7</value>
        <value real="8">8</value>
        <value real="9">9</value>
        <value real="10">10</value>
        <value real="11">11</value>
        <value real="12">12</value>
        <value real="13">13</value>
        <value real="14">14</value>
        <value real="15">15</value>
        <value real="16">16</value>
        <value real="17">17</value>
        <value real="18">18</value>
        <value real="19">19</value>
        <value real="20">20</value>
        <value real="21">21</value>
        <value real="22">22</value>
        <value real="23">23</value>
        <value real="24">24</value>
        <value real="25">25</value>
        <value real="26">26</value>
        <value real="27">27</value>
        <value real="28">28</value>
        <value real="29">29</value>
        <value real="30">30</value>
        <value real="31">31</value>
        <value real="32">32</value>
        <value real="33">33</value>
        <value real="34">34</value>
        <value real="35">35</value>
        <value real="36">36</value>
        <value real="37">37</value>
        <value real="38">38</value>
        <value real="39">39</value>
        <value real="40">40</value>
      </values>
    </template>
  </objectTemplate>
</globalTemplates>
